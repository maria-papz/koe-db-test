# Generated by Django 5.0.3 on 2025-01-31 07:11

from django.db import migrations, transaction



def populate_indicator_unit(apps, schema_editor):
    # We need to use the historical version of the models (via 'apps')
    Data = apps.get_model('koe_db', 'Data')
    Indicator = apps.get_model('koe_db', 'Indicator')

    with transaction.atomic():
        # For each indicator, find all Data rows that reference it.
        for indicator in Indicator.objects.all():
            # Get distinct Unit IDs associated with this Indicatorâ€™s Data
            unit_ids = (
                Data.objects.filter(indicator=indicator)
                            .exclude(unit__isnull=True)
                            .values_list('unit', flat=True)
                            .distinct()
            )
            unit_ids = list(unit_ids)

            if len(unit_ids) == 1:
                # If there's exactly one unique unit, set it
                indicator.unit_id = unit_ids[0]
                indicator.save()
            elif len(unit_ids) == 0:
                # No unit found for this Indicator (remain None, or handle as needed)
                pass
            else:
                pass

class Migration(migrations.Migration):

    dependencies = [
        ('koe_db', '0010_remove_indicator_isestimate_data_isestimate_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_indicator_unit),
    ]
